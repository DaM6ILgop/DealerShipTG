import math

from aiogram import Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommand, BotCommandScopeDefault, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
import pyodbc
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handler.setDBData import user_is_register
from state.car_massive import CarState

conn_str = ( f'DRIVER={{ODBC Driver 17 for SQL Server}};'
    f'SERVER=AzurLine;'
    f'DATABASE=TG_CarDealer2;'
    f'Trusted_Connection=yes;')

connection = pyodbc.connect(conn_str)
cursor = connection.cursor()


def kb_build(current_page, total_pages, car_list):
    keyboard = InlineKeyboardBuilder()
    cars_per_page = 4  # Limit to 4 cars per page
    start_index = current_page * cars_per_page
    end_index = min(start_index + cars_per_page, len(car_list))

    # Add buttons for cars on the current page
    for i, car in enumerate(car_list[start_index:end_index]):
        button = InlineKeyboardButton(text=str(car[3]), callback_data=str(start_index + i))  # Use index in the list as callback_data
        keyboard.add(button)

    keyboard.adjust(2)

    # Add navigation buttons
    navigation_buttons = []
    if current_page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_{current_page}"))
    else:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="ignore"))
    navigation_buttons.append(InlineKeyboardButton(text=f"{current_page+1}/{total_pages}", callback_data="ignore"))
    if current_page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_{current_page}"))
    else:
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="ignore"))
    keyboard.row(*navigation_buttons)

    return keyboard.as_markup()


async def send_images_from_database(message: Message,state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not await user_is_register(message.from_user.id):
        await bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
        return

    conn = pyodbc.connect(conn_str)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    cursor.execute("""
                   SELECT Images.ImageURL, CarDealer.Developers_name, CarDealer.Developers_country, CarModels.Model_name, CarModels.ID_vehicle_model,
                   Cars.Year_of_vehicle, Cars.Car_color, Cars.Engine_type, Cars.Car_price
                   FROM Images
                   JOIN Cars ON Images.CarID = Cars.VIN_vehicle_number
                   JOIN CarModels ON Cars.ID_vehicle_model = CarModels.ID_vehicle_model
                   JOIN CarDealer ON CarModels.ID_developer = CarDealer.ID_developer
               """)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    rows = cursor.fetchall()
    CarState.car_list = rows
    total_pages = math.ceil(len(CarState.car_list) / 4)  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–µ! üöó\n'
'–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º **—Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π**, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n'
'–ï—Å–ª–∏ –≤–∞–º –ø—Ä–∏–≥–ª—è–Ω—É–ª—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à –∞–≤—Ç–æ—Å–∞–ª–æ–Ω. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º! ü§ù\n'
'–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞ —É–¥–æ–±–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤ "–ú–µ–Ω—é".üìû\n'
                           , reply_markup=kb_build(0, total_pages, CarState.car_list))
    await state.set_state(CarState.select_countries)


async def select_countries(call: CallbackQuery, state: FSMContext, bot:Bot):
    if call.data.isdigit():
        index = int(call.data)
        selected_car = CarState.car_list[index]
        image_url = selected_car[0]
        car_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: {selected_car[1]}\n\n" \
                   f"–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {selected_car[2]}\n\n" \
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {selected_car[3]}\n\n" \
                   f"ID –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {selected_car[4]}\n\n" \
                   f"–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {selected_car[5]}\n\n" \
                   f"–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {selected_car[6]}\n\n" \
                   f"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {selected_car[7]}\n\n" \
                   f"–¶–µ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö: {selected_car[8]}"
        try:
            await bot.send_photo(chat_id=call.message.chat.id, photo=image_url, caption=car_info)
        except Exception:
            await bot.send_message(chat_id=call.message.chat.id, text=car_info)
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if call.data == "ignore":
            return
        if call.data.startswith("prev_"):
            page = int(call.data.split("_")[1]) - 1
        elif call.data.startswith("next_"):
            page = int(call.data.split("_")[1]) + 1
        else:
            return
        total_pages = math.ceil(len(CarState.car_list) / 4)
        await call.message.edit_reply_markup(reply_markup=kb_build(page, total_pages, CarState.car_list))


async def bot_help(message: Message, bot: Bot):
    if not await user_is_register(message.from_user.id):
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')
    else:
        await bot.send_message(message.from_user.id,
                               '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –ø–æ—á—Ç–µ\n'
                               'MailL: dealerShip@gmail.com.')
    return






