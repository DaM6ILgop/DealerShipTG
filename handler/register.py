from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from state.register import RegisterState
import re

from handler.setDBData import handle_user_data
from handler.setDBData import user_is_register

#–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ
async def start_register(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if await user_is_register(user_id):
        await message.answer("‚ù§Ô∏è|–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã|‚ù§Ô∏è")
    else:
        await message.answer(f'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')
        await state.set_state(RegisterState.reg_name)



async def register_name(message: Message, state: FSMContext):
    await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è. {message.text}. \n'
                         f'–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
    await state.update_data(regname=message.text)
    await state.set_state(RegisterState.reg_surname)



async def register_surname(message: Message, state: FSMContext):
    await state.update_data(regsurname=message.text)

    await message.answer(f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. ‚òéÔ∏è\n'
                         f'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–≤–æ–¥–∏–º—ã–π –Ω–æ–º–µ—Ä‚ö†Ô∏è\n'
                         f'–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79493333333')
    await state.set_state(RegisterState.reg_phone)



async def register_phone(message: Message, state: FSMContext):
    if(re.findall('^\+?[7][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$',message.text)):
        await state.update_data(regphone=message.text)
        try:
            reg_data = await state.get_data()
            reg_data['tg_user_id'] = message.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º tg_user_id –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await handle_user_data(reg_data)
            if success:
                reg_name = reg_data.get('regname')
                reg_surname = reg_data.get('regsurname')
                reg_phone = reg_data.get('regphone')
                reg_data['tg_user_id'] = message.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º tg_user_id –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                msg = f'‚ÑπÔ∏è–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ‚ÑπÔ∏è\n\n –ò–º—è: {reg_name} \n\n –§–∞–º–∏–ª–∏—è: {reg_surname} \n\n –¢–µ–ª–µ—Ñ–æ–Ω - {reg_phone}, \n\n –í–∞—à Id - {message.from_user.id}'
                await message.answer(msg)
                await state.clear()
            else:
                await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

    else:
        await message.answer('–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')